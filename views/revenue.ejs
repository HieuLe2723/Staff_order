<%- include('header') %>
<div class="container-fluid">
  <div class="row">
    <div class="col-12">
      <h2 class="mb-4 text-center">üìä B·∫£ng B√°o C√°o Doanh Thu</h2>
    </div>
  </div>

  <% if (error) { %>
    <div class="alert alert-danger">
      <i class="fas fa-exclamation-circle me-2"></i>
      <%= error %>
    </div>
  <% } %>

  <div class="row mb-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title mb-0">L·ªçc B√°o C√°o Doanh Thu</h5>
        </div>
        <div class="card-body">
          <form action="/admin/revenue" method="GET" class="row g-3">
            <div class="col-md-4">
              <label class="form-label">L·ªçc Theo Th·ªùi Gian:</label>
              <select name="filter" class="form-select">
                <option value="all">T·∫•t C·∫£</option>
                <option value="day">Ng√†y</option>
                <option value="month">Th√°ng</option>
                <option value="quarter">Qu√Ω</option>
                <option value="year">NƒÉm</option>
              </select>
            </div>
            <div class="col-md-4">
              <label class="form-label">T·ª´ Ng√†y:</label>
              <input type="date" name="from_date" class="form-control">
            </div>
            <div class="col-md-4">
              <label class="form-label">ƒê·∫øn Ng√†y:</label>
              <input type="date" name="to_date" class="form-control">
            </div>
            <div class="col-12">
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-filter me-2"></i>L·ªçc
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="row mb-4">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title mb-0">Bi·ªÉu ƒê·ªì Doanh Thu</h5>
        </div>
        <div class="card-body">
          <div class="chart-container">
            <canvas id="revenueChart"></canvas>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col-12">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title mb-0">Chi Ti·∫øt Doanh Thu</h5>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Ng√†y</th>
                  <th>T·ªïng Doanh Thu</th>
                  <th>T·ªïng ƒê∆°n H√†ng</th>
                  <th>M√≥n B√°n Ch·∫°y</th>
                  <th>Doanh Thu Trung B√¨nh</th>
                </tr>
              </thead>
              <tbody>
                <% if (reports && reports.length > 0) { %>
                  <% reports.forEach((report, index) => { %>
                    <tr>
                      <td><%= report.ngay_bao_cao %></td>
                      <td><%= new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(report.tong_doanh_thu) %></td>
                      <td><%= report.tong_don_hang %></td>
                      <td><%= report.mon_ban_chay || 'Kh√¥ng c√≥' %></td>
                      <td><%= new Intl.NumberFormat('vi-VN', { style: 'currency', currency: 'VND' }).format(report.tong_don_hang ? (report.tong_doanh_thu / report.tong_don_hang).toFixed(2) : 0) %></td>
                    </tr>
                  <% }) %>
                <% } else { %>
                  <tr>
                    <td colspan="5" class="text-center">Kh√¥ng c√≥ d·ªØ li·ªáu doanh thu.</td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Pass data from EJS to JavaScript with fallback for undefined reports const reportsData = <%- JSON.stringify(typeof reports !== 'undefined' ? reports : []) %>;
 
  const chartLabels = reportsData.length ? reportsData.map(r => r.ngay_bao_cao) : ['Kh√¥ng c√≥ d·ªØ li·ªáu'];
  const chartValues = reportsData.length ? reportsData.map(r => Number(r.tong_doanh_thu)) : [0];
  // Chart configuration
  const ctx = document.getElementById('revenueChart').getContext('2d');
  const chartData = {
    labels: chartLabels,
    datasets: [{
      label: 'T·ªïng Doanh Thu (VND)',
      data: chartValues,
      backgroundColor: 'rgba(54, 162, 235, 0.5)',
      borderColor: 'rgba(54, 162, 235, 1)',
      borderWidth: 1
    }]
  };

  const config = {
    type: 'bar',
    data: chartData,
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            callback: function(value) {
              return new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND'
              }).format(value);
            }
          }
        }
      },
      plugins: {
        legend: {
          position: 'top',
          labels: {
            color: '#000000'
          }
        },
        title: {
          display: true,
          text: 'Bi·ªÉu ƒê·ªì Doanh Thu Theo Th·ªùi Gian',
          color: '#000000'
        }
      }
    }
  };

  // Initialize chart
  const chart = new Chart(ctx, config);

  // Update chart colors for dark mode
  function updateChartColors(isDarkMode) {
    if (chart && chart.data && chart.data.datasets && chart.data.datasets[0]) {
      chart.data.datasets[0].backgroundColor = isDarkMode ? 'rgba(255, 255, 255, 0.5)' : 'rgba(54, 162, 235, 0.5)';
      chart.data.datasets[0].borderColor = isDarkMode ? '#ffffff' : 'rgba(54, 162, 235, 1)';
      chart.update();
    }
  }

  // Dark mode toggle function
  function toggleDarkMode() {
    const isDarkMode = document.body.classList.toggle('dark-mode');
    localStorage.setItem('darkMode', isDarkMode);

    // Update navbar
    const navbar = document.querySelector('.navbar');
    if (navbar) {
      if (isDarkMode) {
        navbar.classList.remove('navbar-dark', 'bg-dark');
        navbar.classList.add('navbar-light', 'bg-light');
        navbar.style.backgroundColor = '#f8f9fa';
        navbar.style.color = '#212529';
      } else {
        navbar.classList.remove('navbar-light', 'bg-light');
        navbar.classList.add('navbar-dark', 'bg-dark');
        navbar.style.backgroundColor = '#343a40';
        navbar.style.color = '#ffffff';
      }
    }

    // Update card colors
    const cards = document.querySelectorAll('.card');
    cards.forEach(card => {
      if (isDarkMode) {
        card.style.backgroundColor = '#2c3e50';
        card.style.color = '#ffffff';
      } else {
        card.style.backgroundColor = '#ffffff';
        card.style.color = '#212529';
      }
    });

    // Update chart colors
    updateChartColors(isDarkMode);
  }

  // Check if dark mode is enabled on page load
  const savedDarkMode = localStorage.getItem('darkMode') === 'true';
  if (savedDarkMode) {
    document.body.classList.add('dark-mode');
    toggleDarkMode();
  }

  // Add dark mode button
  const darkModeButton = document.createElement('button');
  darkModeButton.className = 'btn btn-outline-primary dark-mode-toggle';
  darkModeButton.innerHTML = '<i class="fas fa-moon"></i> Ch·∫ø ƒê·ªô T·ªëi';
  darkModeButton.style.position = 'fixed';
  darkModeButton.style.bottom = '20px';
  darkModeButton.style.right = '20px';
  darkModeButton.onclick = toggleDarkMode;
  document.body.appendChild(darkModeButton);

  // Keyboard shortcut for dark mode
  document.addEventListener('keydown', (e) => {
    if (e.ctrlKey && e.key === 'd') {
      toggleDarkMode();
    }
  });
</script>

<%- include('footer') %>